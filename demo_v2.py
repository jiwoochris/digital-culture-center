import openai
import streamlit as st
from audiorecorder import audiorecorder
from voice.tts import GalaxyTutorial
from voice.stt import NaverSTT
import base64
import requests

# Styling
st.markdown("""
<style>
    .reportview-container {
        background-color: #f4f4f4;
    }
    .chat-message.user {
        background-color: #FFDDC1;
    }
    .chat-message.assistant {
        background-color: #C1FFD7;
    }
    .sidebar .block-container {
        background-color: #FFF5E1;
    }
</style>
""", unsafe_allow_html=True)

st.title("디지털 문화센터")

openai.api_key = st.secrets["OPENAI_API_KEY"]

if "openai_model" not in st.session_state:
    st.session_state["openai_model"] = "gpt-3.5-turbo"

if "messages" not in st.session_state:
    st.session_state.messages = [{"role": "system", "content": "너는 어르신을 상대하는 챗봇이야. 지루하지 않게 대화를 계속 이어나가줘."}]

# Sidebar
with st.sidebar:
    st.title("🔧 설정")
    
    # Add buttons for different activities
    if st.button("디지털 교육"):
        st.session_state.messages = [{"role": "system", "content": "디지털 교육을 시작합니다. 어떤 주제로 교육을 원하시나요?"}]
        st.experimental_rerun()

    if st.button("Ai 놀이 (그림 생성)"):
        st.session_state.messages = [{"role": "system", "content": "Ai 놀이를 시작합니다. 원하는 그림 주제를 말해주세요."}]
        st.experimental_rerun()

    if st.button("간식만들기"):
        st.session_state.messages = [{"role": "system", "content": "간식 레시피를 알려드릴게요. 원하는 재료나 종류를 말해주세요."}]
        st.experimental_rerun()

# Display messages
for message in st.session_state.messages:
    if message["role"] != "system":
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

# Start recording
audio = audiorecorder("🎙️ Click to record", "🛑 Click to stop recording")
    
prompt = None

# Check if audio is recorded
if len(audio) > 0:
    audio.export("audio.wav", format="wav")
    stt = NaverSTT()
    transcribed_text = stt.transcribe("audio.wav")
    prompt = transcribed_text[9:-2]

# Always show the chat input field, regardless of recording
typed_input = st.chat_input("What is up?")
if typed_input:
    prompt = typed_input

# Process the prompt
if prompt:
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    if "Ai 놀이를 시작합니다. 원하는 그림 주제를 말해주세요." in st.session_state.messages[-2]["content"]:

        with st.spinner("Loading...💫"):
            response = openai.Image.create(
            prompt=prompt,
            n=1,
            size="512x512",
            )
            
            image_url = response['data'][0]['url']

            print(image_url)

            st.image(image_url, caption='Generated by OpenAI')

    else:
        with st.chat_message("assistant"):
            message_placeholder = st.empty()
            full_response = ""
            for response in openai.ChatCompletion.create(
                model=st.session_state["openai_model"],
                messages=[
                    {"role": m["role"], "content": m["content"]}
                    for m in st.session_state.messages
                ],
                stream=True,
            ):
                full_response += response.choices[0].delta.get("content", "")
                message_placeholder.markdown(full_response + "▌")
            message_placeholder.markdown(full_response)
        st.session_state.messages.append({"role": "assistant", "content": full_response})

        # Convert the assistant's response to audio
        tutorial = GalaxyTutorial()
        audio_data = tutorial.generate_audio(full_response)
        st.audio(audio_data, format='audio/wav')
